<?xml version="1.0"?>
<launch>
  <arg name="mav_name"            default="multirotor"/>
  <arg name="color"               default="White"/>
  <arg name="x"                   default="0"/>
  <arg name="y"                   default="0"/>
  <arg name="z"                   default="0.1"/>
  <arg name="yaw"                 default="0"/>
  <arg name="debug"               default="false"/>

  <!-- Start Simulator -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="verbose" value="false"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Spawn Model in Gazebo -->
  <include file="$(find roscopter_sim)/launch/spawn_mav.launch">
    <arg name="mav_name"            value="$(arg mav_name)" />
    <arg name="model"               value="$(find roscopter_sim)/xacro/$(arg mav_name)_sil.urdf.xacro" />
    <arg name="x"                   value="$(arg x)"/>
    <arg name="y"                   value="$(arg y)"/>
    <arg name="z"                   value="$(arg z)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="color"               value="$(arg color)"/>
  </include>

  <group ns="$(arg mav_name)">

    <!-- Load common parameters -->
    <rosparam command="load" file="$(find roscopter_sim)/params/$(arg mav_name)_sil.yaml"/>

    <!-- Talk to ROSflight -->
    <node name="rosflight_io" pkg="rosflight" type="rosflight_io" output="screen">
      <param name="udp" value="true"/>
    </node>

    <!-- Joystick -->
    <node name="rc_joy" pkg="rosflight_joy" type="rc_joy" output="screen"/>

    <!-- Is Flying Publisher -->
    <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

    <!-- State Estimator -->
    <node name="mekf" pkg="roscopter" type="mekf_node" output="screen">
      <!-- <remap from="baro" to="baro/data"/> -->
      <remap from="sonar" to="sonar/data"/>
      <remap from="magnetometer" to="mag/data"/>
    </node>

    <!-- Position Controller -->
    <node name="controller" pkg="roscopter" type="controller_node" output="screen">
      <remap from="estimate" to="truth/NED"/>
      <!-- <remap from="estimate" to="estimate"/> -->
    </node>

    <!-- Waypoint Manager -->
    <node name="waypoint_manager" pkg="roscopter" type="waypoint_manager.py" output="screen">
      <remap from="waypoint" to="high_level_command"/>
      <remap from="state" to="truth/NED"/>
      <!-- <remap from="state" to="estimate"/> -->
    </node>

    <!-- plot states -->
    <node pkg="roscopter" type="states_plotter.py" name="states_plotter" output="screen">
      <remap from="ground_truth/odometry/NED" to="truth/NED"/>
      <param name="time_window" value="10.0"/>
    </node>

  </group>

</launch>
